<script setup>
import { Head, useForm, router, Link } from '@inertiajs/vue3'
import {
    UserIcon,
    PencilSquareIcon,
    PlusIcon,
    XMarkIcon,
    TrashIcon
} from '@heroicons/vue/24/solid'
import { ref, watch } from 'vue'

const props = defineProps({
    users: Object,
    showTrashed: Boolean,
    filters: Object
})

const showCreateModal = ref(false)
const showEditModal = ref(false)
const showDeleteModal = ref(false)

const editingUser = ref(null)
const deletingUser = ref(null)

const form = useForm({
    name: '',
    email: '',
    password: ''
})

const deleteForm = useForm({})

const search = ref(props.filters?.search || '')
const sort = ref(props.filters?.sort || 'id')
const direction = ref(props.filters?.direction || 'asc')

watch(search, (value) => {
    router.get('/users', { search: value, trashed: props.showTrashed, sort: sort.value, direction: direction.value }, { preserveState: true, replace: true })
})

function sortBy(field) {
    if (sort.value === field) {
        direction.value = direction.value === 'asc' ? 'desc' : 'asc'
    } else {
        sort.value = field
        direction.value = 'asc'
    }
    router.get('/users', { search: search.value, trashed: props.showTrashed, sort: sort.value, direction: direction.value }, { preserveState: true, replace: true })
}

function openCreate() {
    form.reset()
    showCreateModal.value = true
}

function openEdit(user) {
    editingUser.value = { ...user }
    form.name = user.name
    form.email = user.email
    form.password = ''
    showEditModal.value = true
}

function openDelete(user) {
    deletingUser.value = user
    showDeleteModal.value = true
}

function submit() {
    form.post('/users', {
        forceFormData: true,
        onSuccess: () => {
            form.reset()
            showCreateModal.value = false
        },
    })
}

function update() {
    form.put(`/users/${editingUser.value.id}`, {
        onSuccess: () => {
            form.reset()
            showEditModal.value = false
            editingUser.value = null
        },
    })
}

function destroy() {
    deleteForm.delete(`/users/${deletingUser.value.id}`, {
        onSuccess: () => {
            showDeleteModal.value = false
            deletingUser.value = null
        }
    })
}

function restore(user) {
    router.put(`/users/${user.id}/restore`)
}

function forceDelete(user) {
    router.delete(`/users/${user.id}/force`)
}

function toggleTrashView() {
    router.get('/users', { trashed: !props.showTrashed, search: search.value, sort: sort.value, direction: direction.value }, { preserveScroll: true })
}
</script>

<template>
    <Head title="Gebruikers" />

    <div class="max-w-6xl mx-auto p-6 space-y-6">
        <div class="flex items-center justify-between flex-wrap gap-4">
            <div class="flex items-center gap-2">
                <UserIcon class="w-7 h-7 text-indigo-600" />
                <h1 class="text-3xl font-bold text-gray-800">Gebruikers</h1>
            </div>
            <div class="flex flex-wrap items-center gap-2">
                <div class="relative">
                    <input
                        v-model="search"
                        type="text"
                        placeholder="Zoeken..."
                        class="border rounded px-3 py-2 text-sm shadow-sm focus:ring-indigo-500 focus:border-indigo-500 pr-10"
                    />
                    <button
                        v-if="search"
                        @click="search = ''"
                        class="absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-gray-600"
                        title="Wis zoekopdracht"
                    >
                        <XMarkIcon class="w-4 h-4" />
                    </button>
                </div>
                <button
                    @click="toggleTrashView"
                    :class="[
            'inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium transition',
            props.showTrashed
              ? 'bg-gray-100 text-gray-700 hover:bg-gray-200'
              : 'bg-white border text-gray-600 hover:bg-gray-50'
          ]"
                >
                    <TrashIcon class="w-4 h-4" />
                    <span v-if="!props.showTrashed">Prullenbak</span>
                    <span v-else>Toon actieve</span>
                </button>
                <button
                    @click="openCreate"
                    class="inline-flex items-center gap-2 bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg transition font-medium"
                >
                    <PlusIcon class="w-5 h-5" />
                    Nieuwe gebruiker
                </button>
            </div>
        </div>

        <div class="bg-white rounded-xl shadow-sm border overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 text-sm">
                <thead class="bg-gray-50 text-gray-600 font-semibold">
                <tr>
                    <th @click="sortBy('id')" class="px-6 py-4 text-left cursor-pointer">
                        ID
                        <span v-if="sort === 'id'">{{ direction === 'asc' ? '↑' : '↓' }}</span>
                    </th>
                    <th @click="sortBy('name')" class="px-6 py-4 text-left cursor-pointer">
                        Naam
                        <span v-if="sort === 'name'">{{ direction === 'asc' ? '↑' : '↓' }}</span>
                    </th>
                    <th @click="sortBy('email')" class="px-6 py-4 text-left cursor-pointer">
                        Email
                        <span v-if="sort === 'email'">{{ direction === 'asc' ? '↑' : '↓' }}</span>
                    </th>
                    <th class="px-6 py-4 text-left">Acties</th>
                </tr>
                </thead>
                <tbody class="divide-y divide-gray-100 text-gray-700">
                <tr
                    v-for="user in props.users.data"
                    :key="user.id"
                    :class="user.deleted_at ? 'text-gray-400 bg-gray-50 italic' : 'hover:bg-gray-50 transition'"
                >
                    <td class="px-6 py-3">{{ user.id }}</td>
                    <td class="px-6 py-3 font-medium">{{ user.name }}</td>
                    <td class="px-6 py-3">{{ user.email }}</td>
                    <td class="px-6 py-3 flex gap-3">
                        <template v-if="user.deleted_at">
                            <button @click="restore(user)" class="text-indigo-600 hover:underline text-sm">Herstellen</button>
                            <button @click="forceDelete(user)" class="text-red-600 hover:underline text-sm">Definitief verwijderen</button>
                        </template>
                        <template v-else>
                            <button
                                @click="openEdit(user)"
                                class="text-indigo-600 hover:underline flex items-center gap-1"
                            >
                                <PencilSquareIcon class="w-4 h-4" />
                                Bewerken
                            </button>
                            <button
                                @click="openDelete(user)"
                                class="text-red-600 hover:underline text-sm"
                            >
                                Verwijder
                            </button>
                        </template>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>

        <div v-if="props.users.links.length > 3" class="flex justify-end gap-2 mt-4 text-sm">
            <template v-for="(link, i) in props.users.links" :key="i">
                <component
                    :is="link.url ? Link : 'span'"
                    :href="link.url"
                    class="px-3 py-1 rounded border"
                    :class="{
            'bg-indigo-600 text-white border-indigo-600': link.active,
            'text-gray-600 hover:bg-gray-100': !link.active && link.url,
            'text-gray-400': !link.url
          }"
                    v-html="link.label"
                />
            </template>
        </div>
    </div>

    <!-- Modals -->
    <div v-if="showCreateModal" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-white w-full max-w-md rounded-lg shadow-lg p-6 relative">
            <button @click="showCreateModal = false" class="absolute top-3 right-3 text-gray-500 hover:text-gray-700">
                <XMarkIcon class="w-5 h-5" />
            </button>
            <h2 class="text-xl font-bold mb-4">Nieuwe gebruiker</h2>
            <form @submit.prevent="submit" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium">Naam</label>
                    <input v-model="form.name" type="text" class="w-full rounded border-gray-300 focus:ring-indigo-500" />
                    <p v-if="form.errors.name" class="text-sm text-red-600">{{ form.errors.name }}</p>
                </div>
                <div>
                    <label class="block text-sm font-medium">E-mail</label>
                    <input v-model="form.email" type="email" class="w-full rounded border-gray-300 focus:ring-indigo-500" />
                    <p v-if="form.errors.email" class="text-sm text-red-600">{{ form.errors.email }}</p>
                </div>
                <div>
                    <label class="block text-sm font-medium">Wachtwoord</label>
                    <input v-model="form.password" type="password" class="w-full rounded border-gray-300 focus:ring-indigo-500" />
                    <p v-if="form.errors.password" class="text-sm text-red-600">{{ form.errors.password }}</p>
                </div>
                <div class="flex justify-end gap-2">
                    <button type="button" @click="showCreateModal = false" class="text-gray-600 hover:underline">Annuleer</button>
                    <button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded" :disabled="form.processing">Opslaan</button>
                </div>
            </form>
        </div>
    </div>

    <div v-if="showEditModal" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-white w-full max-w-md rounded-lg shadow-lg p-6 relative">
            <button @click="showEditModal = false" class="absolute top-3 right-3 text-gray-500 hover:text-gray-700">
                <XMarkIcon class="w-5 h-5" />
            </button>
            <h2 class="text-xl font-bold mb-4">Gebruiker bewerken</h2>
            <form @submit.prevent="update" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium">Naam</label>
                    <input v-model="form.name" type="text" class="w-full rounded border-gray-300 focus:ring-indigo-500" />
                    <p v-if="form.errors.name" class="text-sm text-red-600">{{ form.errors.name }}</p>
                </div>
                <div>
                    <label class="block text-sm font-medium">E-mail</label>
                    <input v-model="form.email" type="email" class="w-full rounded border-gray-300 focus:ring-indigo-500" />
                    <p v-if="form.errors.email" class="text-sm text-red-600">{{ form.errors.email }}</p>
                </div>
                <div>
                    <label class="block text-sm font-medium">Wachtwoord <span class="text-sm text-gray-400">(optioneel)</span></label>
                    <input v-model="form.password" type="password" class="w-full rounded border-gray-300 focus:ring-indigo-500" />
                    <p v-if="form.errors.password" class="text-sm text-red-600">{{ form.errors.password }}</p>
                </div>
                <div class="flex justify-end gap-2">
                    <button type="button" @click="showEditModal = false" class="text-gray-600 hover:underline">Annuleer</button>
                    <button type="submit" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded" :disabled="form.processing">Bijwerken</button>
                </div>
            </form>
        </div>
    </div>

    <div v-if="showDeleteModal" class="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
        <div class="bg-white w-full max-w-md rounded-lg shadow-lg p-6 relative">
            <button @click="showDeleteModal = false" class="absolute top-3 right-3 text-gray-500 hover:text-gray-700">
                <XMarkIcon class="w-5 h-5" />
            </button>
            <h2 class="text-xl font-bold mb-4 text-red-700">Gebruiker verwijderen</h2>
            <p class="mb-4 text-gray-700">
                Weet je zeker dat je <strong>{{ deletingUser?.name }}</strong> wilt verwijderen?
                Deze actie kan niet ongedaan gemaakt worden.
            </p>
            <div class="flex justify-end gap-2">
                <button @click="showDeleteModal = false" class="text-gray-600 hover:underline">Annuleer</button>
                <button @click="destroy" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded" :disabled="deleteForm.processing">
                    Verwijderen
                </button>
            </div>
        </div>
    </div>
</template>
